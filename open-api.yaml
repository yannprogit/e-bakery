openapi: 3.0.3
info:
  title: Swagger E-Bakery - OpenAPI 3.0
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
tags:
  - name: Customer
    description: Everything about your customers
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /customers:
    get:
      tags:
        - Customer
      summary: Get all the customers
      description: Return an array of customers
      operationId: getAllCustomers
      responses:
        '200':
          description: successful operation 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/customerList'
        '400':
          description: Sorry the list doesn't exist
          
    post:
      tags:
        - Customer
      summary: Add a new customer
      description: Add a new customer
      operationId: addCustomer
      requestBody:
        description: Create a new customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '200':
          description: New customer successfully added to the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'          
        '400':
          description: Invalid input
          
  /customers/{id}:
    put:
      tags:
        - Customer
      summary: Update a customer
      description: Update a customer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
          
    delete:
        tags:
          - customer
        summary: Delete a customer
        description: delete a customer
        operationId: deleteCustomer
        parameters:
          - name: id
            in: path
            description: Customer id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '400':
            description: Invalid customer id
            
            
  /employees:
    get:
      tags:
        - Employee 
      summary: Get all the employees
      description: Return an array of employees
      operationId: getAllEmployees
      responses:
        '200':
          description: successful operation 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/employeeList'
        '400':
          description: Sorry the list doesn't exist
          
    post:
      tags:
        - Employee
      summary: Add a new Employee
      description: Add a new Employee
      operationId: addEmployee
      requestBody:
        description: Create a new Employee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: New Employee successfully added to the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'          
        '400':
          description: Invalid input
          
  /employee/{id}:
    put:
      tags:
        - Employee
      summary: Update a employee
      description: Update a employee
      operationId: updateEmployee
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent employee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
          
    delete:
        tags:
          - Employee
        summary: Delete a employee
        description: delete a employee
        operationId: deleteEmployee
        parameters:
          - name: id
            in: path
            description: Employee id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '400':
            description: Invalid employee id
     
            
  /foods:
    get:
      tags:
        - Food 
      summary: Get all the foods
      description: Return an array of foods
      operationId: getAllFoods
      responses:
        '200':
          description: successful operation 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/foodsList'
        '400':
          description: Sorry the list doesn't exist
          
    post:
      tags:
        - Food
      summary: Add a new Food
      description: Add a new Food
      operationId: addFood
      requestBody:
        description: Create a new Food
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
        required: true
      responses:
        '200':
          description: New Food successfully added to the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'          
        '400':
          description: Invalid input
          
  /food/{id}:
    put:
      tags:
        - Food
      summary: Update a Food
      description: Update a Food
      operationId: updateFood
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Food
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Food not found
          
    delete:
        tags:
          - Food
        summary: Delete a Food
        description: delete a Food
        operationId: deleteFood
        parameters:
          - name: id
            in: path
            description: Food id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '400':
            description: Invalid Food id


  /ingredients:
    get:
      tags:
        - Ingredient 
      summary: Get all the ingredients
      description: Return an array of ingredients
      operationId: getAllIngredients
      responses:
        '200':
          description: successful operation 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ingredientsList'
        '400':
          description: Sorry the list doesn't exist
          
    post:
      tags:
        - Ingredient
      summary: Add a new Ingredient
      description: Add a new Ingredient
      operationId: addIngredient
      requestBody:
        description: Create a new Ingredient
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingredient'
        required: true
      responses:
        '200':
          description: New Ingredient successfully added to the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'          
        '400':
          description: Invalid input
          
  /ingredient/{id}:
    put:
      tags:
        - Ingredient
      summary: Update a Ingredient
      description: Update a Ingredient
      operationId: updateIngredient
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Ingredient
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingredient'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Ingredient not found
          
    delete:
        tags:
          - Ingredient
        summary: Delete a Ingredient
        description: delete a Ingredient
        operationId: deleteIngredient
        parameters:
          - name: id
            in: path
            description: Ingredient id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '400':
            description: Invalid Ingredient id
            

  /purchases:
    get:
      tags:
        - Purchase 
      summary: Get all the Purchases
      description: Return an array of Purchases
      operationId: getAllPurchases
      responses:
        '200':
          description: successful operation 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/purchasesList'
        '400':
          description: Sorry the list doesn't exist
          
    post:
      tags:
        - Purchase
      summary: Add a new Purchase
      description: Add a new Purchase
      operationId: addPurchase
      requestBody:
        description: Create a new Purchase
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
        required: true
      responses:
        '200':
          description: New Purchase successfully added to the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'          
        '400':
          description: Invalid input
          
  /purchases/{id}:
    put:
      tags:
        - Purchase
      summary: Update a Purchase
      description: Update a Purchase
      operationId: updatePurchase
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Purchase
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Purchase not found
          
    delete:
        tags:
          - Purchase
        summary: Delete a Purchase
        description: delete a Purchase
        operationId: deletePurchase
        parameters:
          - name: id
            in: path
            description: Purchase id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '400':
            description: Invalid Buy id
          
          
  /contains:
    get:
      tags:
        - Contain 
      summary: Get all the contains
      description: Return an array of contains
      operationId: getAllContains
      responses:
        '200':
          description: successful operation 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/containsList'
        '400':
          description: Sorry the list doesn't exist
          
    post:
      tags:
        - Contain
      summary: Add a new Contain
      description: Add a new Contain
      operationId: addContain
      requestBody:
        description: Create a new Contain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contain'
        required: true
      responses:
        '200':
          description: New Contain successfully added to the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contain'          
        '400':
          description: Invalid input
          
    put:
      tags:
        - Contain
      summary: Update a Contain
      description: Update a Contain
      operationId: updateContain
      requestBody:
        description: Update an existent Contain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contain'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contain'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Contain not found
          
    delete:
        tags:
          - Contain
        summary: Delete a Contain
        description: delete a Contain
        operationId: deleteContain
        responses:
          '400':
            description: Invalid Contain id
            

  /roles:
    get:
      tags:
        - Role 
      summary: Get all the Roles
      description: Return an array of Roles
      operationId: getAllRoles
      responses:
        '200':
          description: successful operation 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/rolesList'
        '400':
          description: Sorry the list doesn't exist
          
    post:
      tags:
        - Role
      summary: Add a new Role
      description: Add a new Role
      operationId: addRole
      requestBody:
        description: Create a new Role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: New Role successfully added to the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'          
        '400':
          description: Invalid input
          
    put:
      tags:
        - Role
      summary: Update a Role
      description: Update a Role
      operationId: updateRole
      requestBody:
        description: Update an existent Role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Role not found
          
    delete:
        tags:
          - Role
        summary: Delete a Role
        description: delete a Role
        operationId: deleteRole
        responses:
          '400':
            description: Invalid Role id
            
            
components:
  schemas:
    customerList:
      type: array
      items:
        $ref: '#/components/schemas/Customer'
    Customer:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        mail:
          type: string
        mdp:
          type: string
          
    employeeList:
      type: array
      items:
        $ref: '#/components/schemas/Employee'
    Employee:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        mail:
          type: string
        role:
          type: integer
        mdp:
          type: string
          
          
    foodsList:
      type: array
      items:
        $ref: '#/components/schemas/Food'
    Food:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
          
    ingredientsList:
      type: array
      items:
        $ref: '#/components/schemas/Ingredient'
    Ingredient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          
    purchasesList:
      type: array
      items:
        $ref: '#/components/schemas/Purchase'
    Purchase:
      type: object
      properties:
        id:
          type: integer
        customerId:
          type: integer
        deliverymanId:
          type: integer
        foodId:
          type: integer
        dueDate:
          type: string
        deliveryDate:
          type: string
        
    containsList:
      type: array
      items:
        $ref: '#/components/schemas/Contain'
    Contain:
      type: object
      properties:
        foodId:
          type: integer
        ingredientId:
          type: integer

    rolesList:
      type: array
      items:
        $ref: '#/components/schemas/Contain'
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: integer

    